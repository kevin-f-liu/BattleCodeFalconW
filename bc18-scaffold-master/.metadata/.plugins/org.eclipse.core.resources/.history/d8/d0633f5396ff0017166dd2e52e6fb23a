import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

import bc.*;

public class CombatManeuver {

	private ArrayList<Unit> playerCombatUnits;
	private ArrayList<Unit> enemyCombatUnits;
	private final int KNIGHT_POWER = 2; // These can be learned automatically exdee
	private final int MAGE_POWER = 4;
	private final int RANGER_POWER = 6;
	private int playerPowerScore;
	private int enemyPowerScore;

	public CombatManeuver() {
		playerPowerScore = 0;
		enemyPowerScore = 0;
		playerCombatUnits = new ArrayList<Unit>();
		enemyCombatUnits = new ArrayList<Unit>();
	}

	/**
	 * Updates the Power Score of our team, and the power score of enemy team.
	 * @param ourUnits
	 * @param enemies
	 * @return int[] containing playerPowerScore, enemyPowerScore.
	 */
	public int[] updatePowerScore(PlayerUnits ourUnits, EnemyLocations enemies) {
		PlayerUnits enemyUnits = enemies.getEnemyUnits();

		for (Unit u : ourUnits.getMages().values()) {
			playerPowerScore += MAGE_POWER;
		}
		for (Unit u : ourUnits.getKnights().values()) {
			playerPowerScore += KNIGHT_POWER;
		}
		for (Unit u : ourUnits.getRangers().values()) {
			playerPowerScore += RANGER_POWER;
		}

		for (Unit u : enemyUnits.getMages().values()) {
			enemyPowerScore += MAGE_POWER;
		}
		for (Unit u : enemyUnits.getKnights().values()) {
			enemyPowerScore += KNIGHT_POWER;
		}
		for (Unit u : enemyUnits.getRangers().values()) {
			enemyPowerScore += RANGER_POWER;
		}
		
		return new int[] {playerPowerScore, enemyPowerScore};
	}

	/**
	 * Method that returns the best target to attack within the attackable
	 * units. 
	 * (Target selection)
	 * 
	 * @return Best possible unit to attack, null otherwise.
	 */
	public Unit targetSelection(GameController gc, Unit unit, Team enemyTeam) {

		EnemyLocations enemies = new EnemyLocations(gc, enemyTeam);

		ArrayList<Unit> possibleTargets = enemies.attackableList(gc, unit);
		ArrayList<Unit> withinRangeOf = enemies.isWithinAttackRange(unit);

		// Check that this Unit can attack another Unit
		if (possibleTargets.isEmpty() == false) {

			// First attack units that can attack the current Unit.
			for (Unit u : withinRangeOf) {
				if (possibleTargets.contains(u) && gc.canAttack(unit.id(), u.id())) {
					return u;
				}
			}

			// Then attack other combat units.
			for (Unit u : possibleTargets) {
				if (u.unitType() == UnitType.Knight || u.unitType() == UnitType.Mage || u.unitType() == UnitType.Ranger
						|| gc.canAttack(unit.id(), u.id())) {
					return u;
				}
			}

			// Attack any possible targets.
			for (Unit u : possibleTargets) {
				if (gc.canAttack(unit.id(), u.id())) {
					return u;
				}
			}

		}

		return null;
	}

	/**
	 * Method that finds a target and move towards it.
	 * This method looks for the closest enemy target. 
	 * @param unit
	 * @param gc
	 */
	public MapLocation seekTarget(Unit unit, FalconMap map, EnemyLocations enemyLoc, PathFinder pf, GameController gc) {
		
		// Get list of enemy Units
		PlayerUnits enemies = enemyLoc.getEnemyUnits();
		HashMap<Integer, Unit> enemyUnits = enemies.getAllUnits();
		Team enemyTeam = enemyUnits.values().iterator().next().team();
		
		// Get Current Unit attack range
		Long atkRange = unit.attackRange();
		Long rangeConstraint = (long) 0;
		if (unit.unitType() == UnitType.Ranger){
			rangeConstraint = unit.rangerCannotAttackRange();
		}
		
		// Use BFS to find nearest enemy unit to this unit.
		boolean visited[][] = new boolean[map.width][map.height];
		LinkedList<MapLocation> queue = new LinkedList<MapLocation>();
		
		queue.push(unit.location().mapLocation());
		visited[unit.location().mapLocation().getX()][unit.location().mapLocation().getY()] = true;
		
		while (queue.size() != 0){
			MapLocation current = queue.pop();
			
			// Check if an enemyUnit is at this MapLocation, while also accounting for the attack range of this Unit.
			//gc.senseUnitAtLocation(current);
			VecUnit attackableUnitsAtLocation = gc.senseNearbyUnitsByTeam(current, atkRange, enemyTeam);
			if (attackableUnitsAtLocation.size() != 0){
				return current;
			}
			
			//Otherwise, push all adjacent nodes into the BFS.
			MapLocation adjNorth, adjSouth, adjEast, adjWest;
			adjNorth = current.add(Direction.North);
			adjSouth = current.add(Direction.South);
			adjEast = current.add(Direction.East);
			adjWest = current.add(Direction.West);
			if (visited[adjNorth.getX()][adjNorth.getY()] != true){
				visited[adjNorth.getX()][adjNorth.getY()] = true;
				queue.push(adjNorth);
			}
			if (visited[adjSouth.getX()][adjSouth.getY()] != true){
				visited[adjSouth.getX()][adjSouth.getY()] = true;
				queue.push(adjSouth);
			}
			if (visited[adjEast.getX()][adjEast.getY()] != true){
				visited[adjEast.getX()][adjEast.getY()] = true;
				queue.push(adjEast);
			}
			if (visited[adjWest.getX()][adjWest.getY()] != true){
				visited[adjWest.getX()][adjWest.getY()] = true;
				queue.push(adjWest);
			}
			

			
		}
		
		
		return null;
	}

}
