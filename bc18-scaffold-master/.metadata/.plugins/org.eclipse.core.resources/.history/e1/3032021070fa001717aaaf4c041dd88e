import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

import bc.*;
public class EnemyLocations {

	private PlayerUnits enemies;
	private static Team ENEMY_TEAM;
	
	public EnemyLocations(GameController gc, Team enemyTeam){
		
		MapLocation loc = new MapLocation(gc.planet(), 0, 0);
		ENEMY_TEAM = enemyTeam;
		VecUnit enemyUnits = gc.senseNearbyUnitsByTeam(loc, Integer.MAX_VALUE, enemyTeam);
		enemies = new PlayerUnits(enemyUnits);
		
	}
	
	public void updateEnemyLocations(GameController gc){
		MapLocation loc = new MapLocation(gc.planet(), 0, 0);
		VecUnit enemyUnits = gc.senseNearbyUnitsByTeam(loc, Integer.MAX_VALUE, ENEMY_TEAM);
		enemies.checkNewUnits(enemyUnits);
	}
	
	
	//within attack range, within one move of our units
	
	/**
	 * Method that returns an ArrayList of units that can currently attack the given unit.
	 * @param unit
	 * @return
	 */
	public ArrayList<Unit> isWithinAttackRange(Unit unit){
		ArrayList<Unit> canBeAttackedBy = new ArrayList<Unit>();
		HashMap<Integer, Unit> enemyUnits = enemies.getAllUnits();
		MapLocation ourLoc = unit.location().mapLocation();
		for (int key: enemyUnits.keySet()){
			Unit enemyUnit = enemyUnits.get(key);
			if(enemyUnit.unitType() == UnitType.Knight){
				if (enemyUnit.location().mapLocation().distanceSquaredTo(ourLoc) == 1){
					canBeAttackedBy.add(enemyUnit);
				}
			} else if (enemyUnit.unitType() == UnitType.Mage){
				if (enemyUnit.location().mapLocation().distanceSquaredTo(ourLoc) <= 30){
					canBeAttackedBy.add(enemyUnit);
				}
				
			} else if (enemyUnit.unitType() == UnitType.Ranger){
				if (enemyUnit.location().mapLocation().distanceSquaredTo(ourLoc) >= 10 && ){
					canBeAttackedBy.add(enemyUnit);
				}
				
			}
			
		}
		System.out.println("Unit: " + unit.id() + " within enemy attack range!");
		return null;	
	}
	
	/**
	 * Method that returns an ArrayList of units that given unit can attack. 
	 * @param gc
	 * @param unit
	 * @return
	 */
	public ArrayList<Unit> canAttack(GameController gc, Unit unit){
		ArrayList<Unit> attackable = new ArrayList<Unit>();
		if (unit.unitType() == UnitType.Knight){
			VecUnit surroundingEnemyUnits = gc.senseNearbyUnitsByTeam(unit.location().mapLocation(), 1, ENEMY_TEAM);
			for (int i = 0; i < surroundingEnemyUnits.size(); i++){
				attackable.add(surroundingEnemyUnits.get(i));
			}
			
		} else if (unit.unitType() == UnitType.Mage){
			VecUnit surroundingEnemyUnits = gc.senseNearbyUnitsByTeam(unit.location().mapLocation(), 30, ENEMY_TEAM);
			for (int i = 0; i < surroundingEnemyUnits.size(); i++){
				attackable.add(surroundingEnemyUnits.get(i));
			}
		} else if (unit.unitType() == UnitType.Ranger){
			VecUnit surroundingEnemyUnits = gc.senseNearbyUnitsByTeam(unit.location().mapLocation(), 50, ENEMY_TEAM);
			VecUnit unitsTooClose = gc.senseNearbyUnitsByTeam(unit.location().mapLocation(), 10, ENEMY_TEAM);
			ArrayList<Unit> tooClose = new ArrayList<Unit>();
			for (int i = 0; i < unitsTooClose.size(); i++){
				tooClose.add(unitsTooClose.get(i));
			}
			for (int i = 0; i < surroundingEnemyUnits.size(); i++){
				Unit current = surroundingEnemyUnits.get(i);
				if (tooClose.contains(current) == false){
					attackable.add(current);
				}
			}
		}	
		return attackable;
	}
	public static void main(String[] args){
		HashMap<Integer, String> map = new HashMap<Integer, String>();
		map.put(1, "A");
		System.out.println(map.get(new Integer(1)));
	}
}
